/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TweetController,
  TweetControllerInterface,
} from "../TweetController";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tweetId",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "changeValue",
        type: "int256",
      },
    ],
    name: "changeVoteInTweet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_text",
        type: "string",
      },
    ],
    name: "createTweet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_managerAddr",
        type: "address",
      },
    ],
    name: "setManagerAddr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561089d806100326000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806321635eab1461005c5780637978b231146100715780637c9cd2bc146100845780639c675eaa146100aa578063f2fde38b146100d5575b600080fd5b61006f61006a36600461064c565b6100e8565b005b61006f61007f366004610686565b610318565b6100976100923660046106c0565b610364565b6040519081526020015b60405180910390f35b6000546100bd906001600160a01b031681565b6040516001600160a01b0390911681526020016100a1565b61006f6100e3366004610686565b6105ed565b80600114806100f8575080600019145b6101535760405162461bcd60e51b815260206004820152602160248201527f63616e206f6e6c79206368616e676520766f746573206279202b31206f72202d6044820152603160f81b60648201526084015b60405180910390fd5b60015460405163bf40fac160e01b815260206004820152600c60248201526b547765657453746f7261676560a01b60448201526001600160a01b0390911690600090829063bf40fac19060640160206040518083038186803b1580156101b857600080fd5b505afa1580156101cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f09190610771565b604051636ac7631f60e01b81526004810186905290915081906001600160a01b03821690636ac7631f9060240160206040518083038186803b15801561023557600080fd5b505afa158015610249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026d919061078e565b6102b05760405162461bcd60e51b8152602060048201526014602482015273151dd9595d08191bd95cc81b9bdd08195e1a5cdd60621b604482015260640161014a565b6040516321635eab60e01b815260048101869052602481018590526001600160a01b038216906321635eab90604401600060405180830381600087803b1580156102f957600080fd5b505af115801561030d573d6000803e3d6000fd5b505050505050505050565b6000546001600160a01b031633146103425760405162461bcd60e51b815260040161014a906107b0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60015460405163bf40fac160e01b815260206004820152600b60248201526a5573657253746f7261676560a81b60448201526000916001600160a01b0316908290829063bf40fac19060640160206040518083038186803b1580156103c857600080fd5b505afa1580156103dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104009190610771565b6040516320b4e25560e21b815233600482015290915081906000906001600160a01b038316906382d389549060240160206040518083038186803b15801561044757600080fd5b505afa15801561045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f91906107f1565b9050806104c55760405162461bcd60e51b81526020600482015260146024820152735573657220646f6573206e6f742065786973742160601b604482015260640161014a565b60405163bf40fac160e01b815260206004820152600c60248201526b547765657453746f7261676560a01b60448201526000906001600160a01b0386169063bf40fac19060640160206040518083038186803b15801561052457600080fd5b505afa158015610538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055c9190610771565b6040516303e6417960e51b815290915081906001600160a01b03821690637cc82f209061058f9086908c9060040161080a565b602060405180830381600087803b1580156105a957600080fd5b505af11580156105bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e191906107f1565b98975050505050505050565b6000546001600160a01b031633146106175760405162461bcd60e51b815260040161014a906107b0565b6001600160a01b03811661062a57600080fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806040838503121561065f57600080fd5b50508035926020909101359150565b6001600160a01b038116811461068357600080fd5b50565b60006020828403121561069857600080fd5b81356106a38161066e565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156106d257600080fd5b813567ffffffffffffffff808211156106ea57600080fd5b818401915084601f8301126106fe57600080fd5b813581811115610710576107106106aa565b604051601f8201601f19908116603f01168101908382118183101715610738576107386106aa565b8160405282815287602084870101111561075157600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561078357600080fd5b81516106a38161066e565b6000602082840312156107a057600080fd5b815180151581146106a357600080fd5b60208082526021908201527f6f6e6c7920746865204f776e65722063616e2063616c6c2066756e6374696f6e6040820152602160f81b606082015260800190565b60006020828403121561080357600080fd5b5051919050565b82815260006020604081840152835180604085015260005b8181101561083e57858101830151858201606001528201610822565b81811115610850576000606083870101525b50601f01601f19169290920160600194935050505056fea2646970667358221220b4f2a97203fd1486b1cfd7478fbbba887e9ed03d6e8b97d07b2d0614a8b6428c64736f6c63430008090033";

type TweetControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TweetControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TweetController__factory extends ContractFactory {
  constructor(...args: TweetControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TweetController> {
    return super.deploy(overrides || {}) as Promise<TweetController>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TweetController {
    return super.attach(address) as TweetController;
  }
  connect(signer: Signer): TweetController__factory {
    return super.connect(signer) as TweetController__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TweetControllerInterface {
    return new utils.Interface(_abi) as TweetControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TweetController {
    return new Contract(address, _abi, signerOrProvider) as TweetController;
  }
}
