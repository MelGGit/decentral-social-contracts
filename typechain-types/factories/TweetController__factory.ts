/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TweetController,
  TweetControllerInterface,
} from "../TweetController";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_text",
        type: "string",
      },
    ],
    name: "createTweet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_managerAddr",
        type: "address",
      },
    ],
    name: "setManagerAddr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610614806100326000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80637978b231146100515780637c9cd2bc146100665780639c675eaa1461008c578063f2fde38b146100b7575b600080fd5b61006461005f36600461041f565b6100ca565b005b610079610074366004610459565b61011f565b6040519081526020015b60405180910390f35b60005461009f906001600160a01b031681565b6040516001600160a01b039091168152602001610083565b6100646100c536600461041f565b6103a8565b6000546001600160a01b031633146100fd5760405162461bcd60e51b81526004016100f49061050a565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60015460405163bf40fac160e01b815260206004820152600b60248201526a5573657253746f7261676560a81b60448201526000916001600160a01b0316908290829063bf40fac19060640160206040518083038186803b15801561018357600080fd5b505afa158015610197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bb919061054b565b6040516320b4e25560e21b815233600482015290915081906000906001600160a01b038316906382d389549060240160206040518083038186803b15801561020257600080fd5b505afa158015610216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023a9190610568565b9050806102805760405162461bcd60e51b81526020600482015260146024820152735573657220646f6573206e6f742065786973742160601b60448201526064016100f4565b60405163bf40fac160e01b815260206004820152600c60248201526b547765657453746f7261676560a01b60448201526000906001600160a01b0386169063bf40fac19060640160206040518083038186803b1580156102df57600080fd5b505afa1580156102f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610317919061054b565b6040516303e6417960e51b815290915081906001600160a01b03821690637cc82f209061034a9086908c90600401610581565b602060405180830381600087803b15801561036457600080fd5b505af1158015610378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039c9190610568565b98975050505050505050565b6000546001600160a01b031633146103d25760405162461bcd60e51b81526004016100f49061050a565b6001600160a01b0381166103e557600080fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116811461041c57600080fd5b50565b60006020828403121561043157600080fd5b813561043c81610407565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561046b57600080fd5b813567ffffffffffffffff8082111561048357600080fd5b818401915084601f83011261049757600080fd5b8135818111156104a9576104a9610443565b604051601f8201601f19908116603f011681019083821181831017156104d1576104d1610443565b816040528281528760208487010111156104ea57600080fd5b826020860160208301376000928101602001929092525095945050505050565b60208082526021908201527f6f6e6c7920746865204f776e65722063616e2063616c6c2066756e6374696f6e6040820152602160f81b606082015260800190565b60006020828403121561055d57600080fd5b815161043c81610407565b60006020828403121561057a57600080fd5b5051919050565b82815260006020604081840152835180604085015260005b818110156105b557858101830151858201606001528201610599565b818111156105c7576000606083870101525b50601f01601f19169290920160600194935050505056fea26469706673582212208701ca6f30dc9bab8edb3fc480bbde68a54d368f9a12751b1b9a1dc5dff1499864736f6c63430008090033";

type TweetControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TweetControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TweetController__factory extends ContractFactory {
  constructor(...args: TweetControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TweetController> {
    return super.deploy(overrides || {}) as Promise<TweetController>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TweetController {
    return super.attach(address) as TweetController;
  }
  connect(signer: Signer): TweetController__factory {
    return super.connect(signer) as TweetController__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TweetControllerInterface {
    return new utils.Interface(_abi) as TweetControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TweetController {
    return new Contract(address, _abi, signerOrProvider) as TweetController;
  }
}
