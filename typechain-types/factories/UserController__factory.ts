/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UserController,
  UserControllerInterface,
} from "../UserController";

const _abi = [
  {
    inputs: [],
    name: "ownerAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_managerAddr",
        type: "address",
      },
    ],
    name: "setManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610188806100326000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80639c675eaa14610046578063d0ebdbe714610075578063f2fde38b1461008a575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610088610083366004610122565b61009d565b005b610088610098366004610122565b6100d6565b6000546001600160a01b031633146100b457600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146100ed57600080fd5b6001600160a01b03811661010057600080fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561013457600080fd5b81356001600160a01b038116811461014b57600080fd5b939250505056fea26469706673582212201aa8080133bf5eeba37b0b3f29e7f96dff3329f5c3cdffa23b4fd05437d5064e64736f6c63430008090033";

type UserControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UserControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UserController__factory extends ContractFactory {
  constructor(...args: UserControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UserController> {
    return super.deploy(overrides || {}) as Promise<UserController>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UserController {
    return super.attach(address) as UserController;
  }
  connect(signer: Signer): UserController__factory {
    return super.connect(signer) as UserController__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserControllerInterface {
    return new utils.Interface(_abi) as UserControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UserController {
    return new Contract(address, _abi, signerOrProvider) as UserController;
  }
}
