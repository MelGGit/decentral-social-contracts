/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TweetStorage, TweetStorageInterface } from "../TweetStorage";

const _abi = [
  {
    inputs: [],
    name: "controllerAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_userId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_text",
        type: "string",
      },
    ],
    name: "createTweet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_userId",
        type: "uint256",
      },
    ],
    name: "getTweetIdsFromUser",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_controllerAdrr",
        type: "address",
      },
    ],
    name: "setControllerAddr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tweets",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "text",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "userId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "postedAt",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610763806100326000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639c675eaa1161005b5780639c675eaa146100e1578063e8d857b01461010c578063ee255c571461012f578063f2fde38b1461014257600080fd5b8063317aae1b146100825780636981fa7d146100ab5780637cc82f20146100c0575b600080fd5b6100956100903660046104be565b610155565b6040516100a291906104d7565b60405180910390f35b6100be6100b936600461051b565b6101b7565b005b6100d36100ce366004610561565b61020c565b6040519081526020016100a2565b6000546100f4906001600160a01b031681565b6040516001600160a01b0390911681526020016100a2565b61011f61011a3660046104be565b610315565b6040516100a2949392919061061c565b6001546100f4906001600160a01b031681565b6100be61015036600461051b565b6103c6565b6000818152600360209081526040918290208054835181840281018401909452808452606093928301828280156101ab57602002820191906000526020600020905b815481526020019060010190808311610197575b50505050509050919050565b6000546001600160a01b031633146101ea5760405162461bcd60e51b81526004016101e190610688565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546000906001600160a01b031633146102745760405162461bcd60e51b815260206004820152602260248201527f4f6e6c7920636f6e74726f6c6c65722063616e2063616c6c2066756e6374696f6044820152616e2160f01b60648201526084016101e1565b60048054906000610284836106c9565b90915550506040805160808101825260045480825260208083018681528385018890524260608501526000928352600282529390912082518155925180519293926102d59260018501920190610425565b5060408281015160028301556060909201516003918201556000948552602090815290842060048054825460018101845592875292909520015550505490565b60026020526000908152604090208054600182018054919291610337906106f2565b80601f0160208091040260200160405190810160405280929190818152602001828054610363906106f2565b80156103b05780601f10610385576101008083540402835291602001916103b0565b820191906000526020600020905b81548152906001019060200180831161039357829003601f168201915b5050505050908060020154908060030154905084565b6000546001600160a01b031633146103f05760405162461bcd60e51b81526004016101e190610688565b6001600160a01b03811661040357600080fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b828054610431906106f2565b90600052602060002090601f0160209004810192826104535760008555610499565b82601f1061046c57805160ff1916838001178555610499565b82800160010185558215610499579182015b8281111561049957825182559160200191906001019061047e565b506104a59291506104a9565b5090565b5b808211156104a557600081556001016104aa565b6000602082840312156104d057600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561050f578351835292840192918401916001016104f3565b50909695505050505050565b60006020828403121561052d57600080fd5b81356001600160a01b038116811461054457600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561057457600080fd5b82359150602083013567ffffffffffffffff8082111561059357600080fd5b818501915085601f8301126105a757600080fd5b8135818111156105b9576105b961054b565b604051601f8201601f19908116603f011681019083821181831017156105e1576105e161054b565b816040528281528860208487010111156105fa57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b84815260006020608081840152855180608085015260005b818110156106505787810183015185820160a001528201610634565b8181111561066257600060a083870101525b5060408401959095525050606081019190915260a0601f909201601f1916010192915050565b60208082526021908201527f6f6e6c7920746865204f776e65722063616e2063616c6c2066756e6374696f6e6040820152602160f81b606082015260800190565b60006000198214156106eb57634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c9082168061070657607f821691505b6020821081141561072757634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212202ae06c4c194c33fe481aaaa84a06518f56e820481e630273f76ff32fd8aceadd64736f6c63430008090033";

type TweetStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TweetStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TweetStorage__factory extends ContractFactory {
  constructor(...args: TweetStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TweetStorage> {
    return super.deploy(overrides || {}) as Promise<TweetStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TweetStorage {
    return super.attach(address) as TweetStorage;
  }
  connect(signer: Signer): TweetStorage__factory {
    return super.connect(signer) as TweetStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TweetStorageInterface {
    return new utils.Interface(_abi) as TweetStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TweetStorage {
    return new Contract(address, _abi, signerOrProvider) as TweetStorage;
  }
}
