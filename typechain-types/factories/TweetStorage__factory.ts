/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TweetStorage, TweetStorageInterface } from "../TweetStorage";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tweetId",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "changeValue",
        type: "int256",
      },
    ],
    name: "changeVoteInTweet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "controllerAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_userId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_text",
        type: "string",
      },
    ],
    name: "createTweet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "doesTweetExist",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumTweets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_userId",
        type: "uint256",
      },
    ],
    name: "getTweetIdsFromUser",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_controllerAdrr",
        type: "address",
      },
    ],
    name: "setControllerAddr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tweetIds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tweetToVotes",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tweets",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "text",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "userId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "postedAt",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561095a806100326000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80639c675eaa116100715780639c675eaa1461016d578063d528de1d14610198578063e8d857b0146101b8578063eb4fdc3f146101db578063ee255c57146101e3578063f2fde38b146101f657600080fd5b806317edf66d146100b957806321635eab146100df578063317aae1b146100f45780636981fa7d146101145780636ac7631f146101275780637cc82f201461015a575b600080fd5b6100cc6100c7366004610608565b610209565b6040519081526020015b60405180910390f35b6100f26100ed366004610621565b61022a565b005b610107610102366004610608565b61028d565b6040516100d69190610643565b6100f2610122366004610687565b6102ef565b61014a610135366004610608565b60036020526000908152604090205460ff1681565b60405190151581526020016100d6565b6100cc6101683660046106cd565b61033b565b600054610180906001600160a01b031681565b6040516001600160a01b0390911681526020016100d6565b6100cc6101a6366004610608565b60046020526000908152604090205481565b6101cb6101c6366004610608565b61045f565b6040516100d69493929190610788565b6006546100cc565b600154610180906001600160a01b031681565b6100f2610204366004610687565b610510565b6006818154811061021957600080fd5b600091825260209091200154905081565b6001546001600160a01b0316331461025d5760405162461bcd60e51b8152600401610254906107f4565b60405180910390fd5b60008281526004602052604090205461027790829061084c565b6000928352600460205260409092209190915550565b6000818152600560209081526040918290208054835181840281018401909452808452606093928301828280156102e357602002820191906000526020600020905b8154815260200190600101908083116102cf575b50505050509050919050565b6000546001600160a01b031633146103195760405162461bcd60e51b81526004016102549061088d565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546000906001600160a01b031633146103685760405162461bcd60e51b8152600401610254906107f4565b60078054906000610378836108ce565b90915550506040805160808101825260075480825260208083018681528385018890524260608501526000928352600282529390912082518155925180519293926103c9926001850192019061056f565b50604082810151600283015560609092015160039182015560009485526005602090815282862060078054825460018082018555938a52848a2001558054600680548085019091557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01819055885260048352848820889055805488529290915291909420805460ff1916909117905550505490565b60026020526000908152604090208054600182018054919291610481906108e9565b80601f01602080910402602001604051908101604052809291908181526020018280546104ad906108e9565b80156104fa5780601f106104cf576101008083540402835291602001916104fa565b820191906000526020600020905b8154815290600101906020018083116104dd57829003601f168201915b5050505050908060020154908060030154905084565b6000546001600160a01b0316331461053a5760405162461bcd60e51b81526004016102549061088d565b6001600160a01b03811661054d57600080fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b82805461057b906108e9565b90600052602060002090601f01602090048101928261059d57600085556105e3565b82601f106105b657805160ff19168380011785556105e3565b828001600101855582156105e3579182015b828111156105e35782518255916020019190600101906105c8565b506105ef9291506105f3565b5090565b5b808211156105ef57600081556001016105f4565b60006020828403121561061a57600080fd5b5035919050565b6000806040838503121561063457600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561067b5783518352928401929184019160010161065f565b50909695505050505050565b60006020828403121561069957600080fd5b81356001600160a01b03811681146106b057600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156106e057600080fd5b82359150602083013567ffffffffffffffff808211156106ff57600080fd5b818501915085601f83011261071357600080fd5b813581811115610725576107256106b7565b604051601f8201601f19908116603f0116810190838211818310171561074d5761074d6106b7565b8160405282815288602084870101111561076657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b84815260006020608081840152855180608085015260005b818110156107bc5787810183015185820160a0015282016107a0565b818111156107ce57600060a083870101525b5060408401959095525050606081019190915260a0601f909201601f1916010192915050565b60208082526022908201527f4f6e6c7920636f6e74726f6c6c65722063616e2063616c6c2066756e6374696f6040820152616e2160f01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600080821280156001600160ff1b038490038513161561086e5761086e610836565b600160ff1b839003841281161561088757610887610836565b50500190565b60208082526021908201527f6f6e6c7920746865204f776e65722063616e2063616c6c2066756e6374696f6e6040820152602160f81b606082015260800190565b60006000198214156108e2576108e2610836565b5060010190565b600181811c908216806108fd57607f821691505b6020821081141561091e57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220b654d63cbd37f5c0e97b0590d3b1955bed0ce5aacb6e26b2d1ab9345f8fac2e764736f6c63430008090033";

type TweetStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TweetStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TweetStorage__factory extends ContractFactory {
  constructor(...args: TweetStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TweetStorage> {
    return super.deploy(overrides || {}) as Promise<TweetStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TweetStorage {
    return super.attach(address) as TweetStorage;
  }
  connect(signer: Signer): TweetStorage__factory {
    return super.connect(signer) as TweetStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TweetStorageInterface {
    return new utils.Interface(_abi) as TweetStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TweetStorage {
    return new Contract(address, _abi, signerOrProvider) as TweetStorage;
  }
}
