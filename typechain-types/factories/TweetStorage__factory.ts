/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TweetStorage, TweetStorageInterface } from "../TweetStorage";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_userId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_text",
        type: "string",
      },
    ],
    name: "createTweet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tweets",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "text",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "userId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "postedAt",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610442806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637cc82f201461003b578063e8d857b014610061575b600080fd5b61004e610049366004610268565b610084565b6040519081526020015b60405180910390f35b61007461006f366004610323565b610108565b604051610058949392919061033c565b6001805460009182610095836103a8565b90915550506040805160808101825260018054808352602080840187815284860189905242606086015260009283528282529490912083518155935180519394936100e79385019291909101906101b9565b50604082015160028201556060909101516003909101555060015492915050565b6000602081905290815260409020805460018201805491929161012a906103d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610156906103d1565b80156101a35780601f10610178576101008083540402835291602001916101a3565b820191906000526020600020905b81548152906001019060200180831161018657829003601f168201915b5050505050908060020154908060030154905084565b8280546101c5906103d1565b90600052602060002090601f0160209004810192826101e7576000855561022d565b82601f1061020057805160ff191683800117855561022d565b8280016001018555821561022d579182015b8281111561022d578251825591602001919060010190610212565b5061023992915061023d565b5090565b5b80821115610239576000815560010161023e565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561027b57600080fd5b82359150602083013567ffffffffffffffff8082111561029a57600080fd5b818501915085601f8301126102ae57600080fd5b8135818111156102c0576102c0610252565b604051601f8201601f19908116603f011681019083821181831017156102e8576102e8610252565b8160405282815288602084870101111561030157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561033557600080fd5b5035919050565b84815260006020608081840152855180608085015260005b818110156103705787810183015185820160a001528201610354565b8181111561038257600060a083870101525b5060408401959095525050606081019190915260a0601f909201601f1916010192915050565b60006000198214156103ca57634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806103e557607f821691505b6020821081141561040657634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212204b3863def480e7428215d1440606fbe4a20811ed67a0f154272e30ba9acb690464736f6c63430008090033";

type TweetStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TweetStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TweetStorage__factory extends ContractFactory {
  constructor(...args: TweetStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TweetStorage> {
    return super.deploy(overrides || {}) as Promise<TweetStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TweetStorage {
    return super.attach(address) as TweetStorage;
  }
  connect(signer: Signer): TweetStorage__factory {
    return super.connect(signer) as TweetStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TweetStorageInterface {
    return new utils.Interface(_abi) as TweetStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TweetStorage {
    return new Contract(address, _abi, signerOrProvider) as TweetStorage;
  }
}
