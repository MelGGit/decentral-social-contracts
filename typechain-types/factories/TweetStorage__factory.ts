/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TweetStorage, TweetStorageInterface } from "../TweetStorage";

const _abi = [
  {
    inputs: [],
    name: "controllerAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_userId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_text",
        type: "string",
      },
    ],
    name: "createTweet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_controllerAdrr",
        type: "address",
      },
    ],
    name: "setControllerAddr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tweets",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "text",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "userId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "postedAt",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561059f806100326000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636981fa7d146100675780637cc82f201461007c5780639c675eaa146100a2578063e8d857b0146100cd578063ee255c57146100f0578063f2fde38b14610103575b600080fd5b61007a61007536600461037f565b610116565b005b61008f61008a3660046103c5565b61014f565b6040519081526020015b60405180910390f35b6000546100b5906001600160a01b031681565b6040516001600160a01b039091168152602001610099565b6100e06100db366004610480565b6101e9565b6040516100999493929190610499565b6001546100b5906001600160a01b031681565b61007a61011136600461037f565b61029a565b6000546001600160a01b0316331461012d57600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546000906001600160a01b0316331461016957600080fd5b6003805490600061017983610505565b90915550506040805160808101825260035480825260208083018681528385018890524260608501526000928352600282529390912082518155925180519293926101ca92600185019201906102e6565b5060408201516002820155606090910151600391820155549392505050565b6002602052600090815260409020805460018201805491929161020b9061052e565b80601f01602080910402602001604051908101604052809291908181526020018280546102379061052e565b80156102845780601f1061025957610100808354040283529160200191610284565b820191906000526020600020905b81548152906001019060200180831161026757829003601f168201915b5050505050908060020154908060030154905084565b6000546001600160a01b031633146102b157600080fd5b6001600160a01b0381166102c457600080fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b8280546102f29061052e565b90600052602060002090601f016020900481019282610314576000855561035a565b82601f1061032d57805160ff191683800117855561035a565b8280016001018555821561035a579182015b8281111561035a57825182559160200191906001019061033f565b5061036692915061036a565b5090565b5b80821115610366576000815560010161036b565b60006020828403121561039157600080fd5b81356001600160a01b03811681146103a857600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156103d857600080fd5b82359150602083013567ffffffffffffffff808211156103f757600080fd5b818501915085601f83011261040b57600080fd5b81358181111561041d5761041d6103af565b604051601f8201601f19908116603f01168101908382118183101715610445576104456103af565b8160405282815288602084870101111561045e57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561049257600080fd5b5035919050565b84815260006020608081840152855180608085015260005b818110156104cd5787810183015185820160a0015282016104b1565b818111156104df57600060a083870101525b5060408401959095525050606081019190915260a0601f909201601f1916010192915050565b600060001982141561052757634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c9082168061054257607f821691505b6020821081141561056357634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220f7844987a3e2e49f634939378d55b023066592ad790238d8ee1c29c7eb1c798e64736f6c63430008090033";

type TweetStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TweetStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TweetStorage__factory extends ContractFactory {
  constructor(...args: TweetStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TweetStorage> {
    return super.deploy(overrides || {}) as Promise<TweetStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TweetStorage {
    return super.attach(address) as TweetStorage;
  }
  connect(signer: Signer): TweetStorage__factory {
    return super.connect(signer) as TweetStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TweetStorageInterface {
    return new utils.Interface(_abi) as TweetStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TweetStorage {
    return new Contract(address, _abi, signerOrProvider) as TweetStorage;
  }
}
