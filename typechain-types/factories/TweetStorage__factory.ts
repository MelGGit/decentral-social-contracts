/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TweetStorage, TweetStorageInterface } from "../TweetStorage";

const _abi = [
  {
    inputs: [],
    name: "controllerAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_userId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_text",
        type: "string",
      },
    ],
    name: "createTweet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumTweets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_userId",
        type: "uint256",
      },
    ],
    name: "getTweetIdsFromUser",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_controllerAdrr",
        type: "address",
      },
    ],
    name: "setControllerAddr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tweetIds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tweets",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "text",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "userId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "postedAt",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556107ea806100326000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80639c675eaa116100665780639c675eaa14610106578063e8d857b014610131578063eb4fdc3f14610154578063ee255c571461015c578063f2fde38b1461016f57600080fd5b806317edf66d14610098578063317aae1b146100be5780636981fa7d146100de5780637cc82f20146100f3575b600080fd5b6100ab6100a6366004610545565b610182565b6040519081526020015b60405180910390f35b6100d16100cc366004610545565b6101a3565b6040516100b5919061055e565b6100f16100ec3660046105a2565b610205565b005b6100ab6101013660046105e8565b61025a565b600054610119906001600160a01b031681565b6040516001600160a01b0390911681526020016100b5565b61014461013f366004610545565b61039c565b6040516100b594939291906106a3565b6004546100ab565b600154610119906001600160a01b031681565b6100f161017d3660046105a2565b61044d565b6004818154811061019257600080fd5b600091825260209091200154905081565b6000818152600360209081526040918290208054835181840281018401909452808452606093928301828280156101f957602002820191906000526020600020905b8154815260200190600101908083116101e5575b50505050509050919050565b6000546001600160a01b031633146102385760405162461bcd60e51b815260040161022f9061070f565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546000906001600160a01b031633146102c25760405162461bcd60e51b815260206004820152602260248201527f4f6e6c7920636f6e74726f6c6c65722063616e2063616c6c2066756e6374696f6044820152616e2160f01b606482015260840161022f565b600580549060006102d283610750565b909155505060408051608081018252600554808252602080830186815283850188905242606085015260009283526002825293909120825181559251805192939261032392600185019201906104ac565b50604082810151600283015560609092015160039182015560009485526020908152908420600580548254600180820185559388529387209093019290925590546004805492830181559094527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018390555090919050565b600260205260009081526040902080546001820180549192916103be90610779565b80601f01602080910402602001604051908101604052809291908181526020018280546103ea90610779565b80156104375780601f1061040c57610100808354040283529160200191610437565b820191906000526020600020905b81548152906001019060200180831161041a57829003601f168201915b5050505050908060020154908060030154905084565b6000546001600160a01b031633146104775760405162461bcd60e51b815260040161022f9061070f565b6001600160a01b03811661048a57600080fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b8280546104b890610779565b90600052602060002090601f0160209004810192826104da5760008555610520565b82601f106104f357805160ff1916838001178555610520565b82800160010185558215610520579182015b82811115610520578251825591602001919060010190610505565b5061052c929150610530565b5090565b5b8082111561052c5760008155600101610531565b60006020828403121561055757600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156105965783518352928401929184019160010161057a565b50909695505050505050565b6000602082840312156105b457600080fd5b81356001600160a01b03811681146105cb57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156105fb57600080fd5b82359150602083013567ffffffffffffffff8082111561061a57600080fd5b818501915085601f83011261062e57600080fd5b813581811115610640576106406105d2565b604051601f8201601f19908116603f01168101908382118183101715610668576106686105d2565b8160405282815288602084870101111561068157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b84815260006020608081840152855180608085015260005b818110156106d75787810183015185820160a0015282016106bb565b818111156106e957600060a083870101525b5060408401959095525050606081019190915260a0601f909201601f1916010192915050565b60208082526021908201527f6f6e6c7920746865204f776e65722063616e2063616c6c2066756e6374696f6e6040820152602160f81b606082015260800190565b600060001982141561077257634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c9082168061078d57607f821691505b602082108114156107ae57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220784b33901c66d1aaba3e056bc60d6ea0d818b9e88ceda6354b3b5faddc24621f64736f6c63430008090033";

type TweetStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TweetStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TweetStorage__factory extends ContractFactory {
  constructor(...args: TweetStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TweetStorage> {
    return super.deploy(overrides || {}) as Promise<TweetStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TweetStorage {
    return super.attach(address) as TweetStorage;
  }
  connect(signer: Signer): TweetStorage__factory {
    return super.connect(signer) as TweetStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TweetStorageInterface {
    return new utils.Interface(_abi) as TweetStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TweetStorage {
    return new Contract(address, _abi, signerOrProvider) as TweetStorage;
  }
}
